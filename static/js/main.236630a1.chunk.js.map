{"version":3,"sources":["components/Box.tsx","redux/actions.ts","redux/types.ts","App.tsx","redux/appReducer.ts","generators.ts","redux/colorReducer.ts","redux/rootReducer.ts","index.tsx"],"names":["Box","color","index","dispatch","useDispatch","useState","clicked","setClicked","colored","setColored","firstGuess","useSelector","state","secondGuess","numberOfTries","app","guessed","hide","setHide","useEffect","checkForSame","setTimeout","type","style","backgroundColor","join","classes","className","onClick","payload","guess","setSecondGuess","App","firstColor","secondColor","sameColorIndexes","score","c","Array","fill","map","_","key","initialState","randomRGBgenerator","Math","floor","random","twoRandomIndexesGenerator","indexes","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.236630a1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  addTry,\r\n  setFirstGuess,\r\n  setSecondGuess,\r\n  cancelGuesses,\r\n  restart,\r\n  addGuessed,\r\n} from \"../redux/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IBoxProps, IRootState } from \"../interfaces\";\r\nconst Box: React.FC<IBoxProps> = ({ color, index }) => {\r\n  const dispatch = useDispatch();\r\n  const [clicked, setClicked] = useState(false);\r\n  const [colored, setColored] = useState(false);\r\n  const firstGuess = useSelector((state: IRootState) => state.color.firstGuess);\r\n  const secondGuess = useSelector(\r\n    (state: IRootState) => state.color.secondGuess\r\n  );\r\n  const numberOfTries = useSelector(\r\n    (state: IRootState) => state.app.numberOfTries\r\n  );\r\n  const guessed = useSelector((state: IRootState) => state.app.guessed);\r\n  const [hide, setHide] = useState(false);\r\n  useEffect(() => {\r\n    if (checkForSame()) {\r\n      setTimeout(() => {\r\n        if (index === firstGuess?.index || index === secondGuess?.index) {\r\n          dispatch(addGuessed());\r\n          setHide(checkForSame());\r\n        }\r\n        dispatch(cancelGuesses());\r\n      }, 1000);\r\n    }\r\n  }, [firstGuess, secondGuess]);\r\n  useEffect(() => {\r\n    if (numberOfTries > 1) {\r\n      setClicked(true);\r\n      setTimeout(() => {\r\n        dispatch(restart());\r\n        setColored(false);\r\n        setClicked(false);\r\n        dispatch(cancelGuesses());\r\n      }, 1000);\r\n    }\r\n  }, [numberOfTries]);\r\n  useEffect(() => {\r\n    if (guessed > 3) {\r\n      setHide(false);\r\n    }\r\n  }, [guessed]);\r\n  const style = {\r\n    backgroundColor: `rgb(${color[0]},${color[1]},${color[2]})`,\r\n  };\r\n  const checkForSame = () => {\r\n    if (firstGuess && secondGuess) {\r\n      return firstGuess.color.join(\"\") === secondGuess.color.join(\"\");\r\n    }\r\n    return false;\r\n  };\r\n  const handleClicker = () => {\r\n    dispatch(addTry());\r\n    numberOfTries > 0\r\n      ? dispatch(setFirstGuess({ color, index }))\r\n      : dispatch(setSecondGuess({ color, index }));\r\n    setColored(true);\r\n    setClicked(true);\r\n  };\r\n  function gap(): void {}\r\n  let classes = [\"box\", hide ? \"hide\" : \"block\"];\r\n  return (\r\n    <div\r\n      style={colored ? style : {}}\r\n      className={classes.join(\" \")}\r\n      onClick={clicked ? gap : handleClicker}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Box;\r\n","import {\r\n  ADD_TRY,\r\n  RESTART,\r\n  SET_FIRST_GUESS,\r\n  SET_SECOND_GUESS,\r\n  CANCEL_GUESSES,\r\n  REDRAW,\r\n  ADD_GUESSED,\r\n  ADD_SCORE,\r\n} from \"./types\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport {\r\n  IGuess,\r\n  IAppInitialState,\r\n  IColorInitialState,\r\n  IRe,\r\n} from \"../interfaces\";\r\n\r\nexport const addTry = () => {\r\n  return { type: ADD_TRY };\r\n};\r\n\r\nexport const restart = () => {\r\n  return (\r\n    dispatch: ThunkDispatch<\r\n      IAppInitialState | IColorInitialState,\r\n      undefined,\r\n      IRe\r\n    >\r\n  ) => {\r\n    dispatch({ type: RESTART });\r\n  };\r\n};\r\n\r\nexport const setFirstGuess = (guess: IGuess) => {\r\n  return { type: SET_FIRST_GUESS, payload: guess };\r\n};\r\nexport const setSecondGuess = (guess: IGuess) => {\r\n  return { type: SET_SECOND_GUESS, payload: guess };\r\n};\r\n\r\nexport const cancelGuesses = () => {\r\n  return { type: CANCEL_GUESSES };\r\n};\r\n\r\nexport const redraw = () => {\r\n  return (\r\n    dispatch: ThunkDispatch<\r\n      IAppInitialState | IColorInitialState,\r\n      undefined,\r\n      IRe\r\n    >\r\n  ) => {\r\n    setTimeout(() => {\r\n      dispatch({ type: REDRAW });\r\n    }, 1000);\r\n  };\r\n};\r\n\r\nexport const addGuessed = () => {\r\n  return {\r\n    type: ADD_GUESSED,\r\n  };\r\n};\r\n\r\nexport const addScore = () => {\r\n  return { type: ADD_SCORE };\r\n};\r\n","export const ADD_TRY = \"ADD TRY\";\r\nexport const RESTART = \"RESTART\";\r\nexport const REDRAW = \"REDRAW\";\r\nexport const SET_FIRST_GUESS = \"SET_FIRST_COLOR\";\r\nexport const SET_SECOND_GUESS = \"SET_SECOND_COLOR\";\r\nexport const CANCEL_GUESSES = \"CANCELL GUESS\";\r\nexport const ADD_GUESSED = \"ADD_GUESSES\";\r\nexport const ADD_SCORE = \"ADD_SCORE\";\r\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Box from \"./components/Box\";\nimport { redraw, addScore } from \"./redux/actions\";\nimport { IRootState } from \"./interfaces\";\nfunction App() {\n  const dispatch = useDispatch();\n  const firstColor = useSelector((state: IRootState) => state.color.firstColor);\n  const secondColor = useSelector(\n    (state: IRootState) => state.color.secondColor\n  );\n  const sameColorIndexes = useSelector(\n    (state: IRootState) => state.color.sameColorIndexes\n  );\n  const score = useSelector((state: IRootState) => state.app.score);\n  const guessed = useSelector((state: IRootState) => state.app.guessed);\n  const numberOfSquares = 4;\n  const squares = new Array(numberOfSquares).fill(numberOfSquares);\n  const c = squares.map((_, index) => {\n    if (index === sameColorIndexes[0] || index === sameColorIndexes[1]) {\n      return <Box key={index} color={firstColor} index={index} />;\n    } else {\n      return <Box key={index} color={secondColor} index={index} />;\n    }\n  });\n  useEffect(() => {\n    if (guessed > 3) {\n      dispatch(redraw());\n      dispatch(addScore());\n    }\n  }, [guessed]);\n  return (\n    <div className=\"container\">\n      <div className=\"score\">Score: {score}</div>\n      <div className=\"boxes\">{c}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ADD_TRY, RESTART, ADD_GUESSED, REDRAW, ADD_SCORE } from \"./types\";\r\nimport { IAppInitialState } from \"../interfaces\";\r\nconst initialState: IAppInitialState = {\r\n  guessed: 0,\r\n  numberOfTries: 0,\r\n  score: 0,\r\n};\r\nexport default (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case ADD_TRY:\r\n      return { ...state, numberOfTries: state.numberOfTries + 1 };\r\n    case ADD_GUESSED:\r\n      return { ...state, guessed: state.guessed + 1 };\r\n    case RESTART:\r\n      return { ...state, numberOfTries: 0 };\r\n    case REDRAW:\r\n      return { ...state, guessed: 0, numberOfTries: 0 };\r\n    case ADD_SCORE:\r\n      return { ...state, score: state.score + 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const randomRGBgenerator = (): number[] => {\r\n  return [\r\n    Math.floor(Math.random() * 255),\r\n    Math.floor(Math.random() * 255),\r\n    Math.floor(Math.random() * 255),\r\n  ];\r\n};\r\nexport const twoRandomIndexesGenerator = (): number[] => {\r\n  const indexes = [\r\n    Math.floor(Math.random() * 4),\r\n    Math.floor(Math.random() * 4),\r\n  ];\r\n  if (indexes[0] !== indexes[1]) {\r\n    return indexes;\r\n  }\r\n  return twoRandomIndexesGenerator();\r\n};\r\n","import {\r\n  SET_FIRST_GUESS,\r\n  SET_SECOND_GUESS,\r\n  CANCEL_GUESSES,\r\n  REDRAW,\r\n} from \"./types\";\r\nimport { randomRGBgenerator, twoRandomIndexesGenerator } from \"../generators\";\r\nconst initialState = {\r\n  firstColor: randomRGBgenerator(),\r\n  secondColor: randomRGBgenerator(),\r\n  sameColorIndexes: twoRandomIndexesGenerator(),\r\n  firstGuess: null,\r\n  secondGuess: null,\r\n};\r\nexport default (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case SET_FIRST_GUESS:\r\n      return { ...state, firstGuess: action.payload };\r\n    case SET_SECOND_GUESS:\r\n      return { ...state, secondGuess: action.payload };\r\n    case CANCEL_GUESSES:\r\n      return { ...state, firstGuess: null, secondGuess: null };\r\n    case REDRAW:\r\n      return {\r\n        ...state,\r\n        firstColor: randomRGBgenerator(),\r\n        secondColor: randomRGBgenerator(),\r\n        sameColorIndexes: twoRandomIndexesGenerator(),\r\n        firstGuess: null,\r\n        secondGuess: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport AppReducer from \"./appReducer\";\r\nimport ColorReducer from \"./colorReducer\";\r\nexport default combineReducers({\r\n  app: AppReducer,\r\n  color: ColorReducer,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport rootReducer from \"./redux/rootReducer\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  compose(applyMiddleware(thunk), composeEnhancers())\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}